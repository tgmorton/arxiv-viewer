#!/bin/bash

# Get the absolute path to the app bundle
APP_PATH=$(cd "$(dirname "$0")" && cd ../../.. && pwd)

# Get the path to the script's parent directory (the repository root)
REPO_PATH=$(dirname "$APP_PATH")

# Change to the repository directory
cd "$REPO_PATH"

# Check if Node.js is installed
if ! command -v node >/dev/null 2>&1; then
  osascript -e 'display dialog "Node.js is not installed. Please install Node.js to run this application." buttons {"OK"} default button "OK" with icon stop'
  exit 1
fi

# Check if dependencies are installed
if [ ! -d "node_modules" ]; then
  # Create a temporary file for output
  TEMP_LOG=$(mktemp)
  
  # Show notification that we're installing dependencies
  osascript -e 'display notification "Installing dependencies..." with title "ArXiv Viewer"'
  
  # Install dependencies
  npm install > "$TEMP_LOG" 2>&1
  
  # Check if installation was successful
  if [ $? -ne 0 ]; then
    osascript -e 'display dialog "Failed to install dependencies. Check terminal for details." buttons {"OK"} default button "OK" with icon stop'
    open -a Terminal.app "$TEMP_LOG"
    exit 1
  fi
  
  rm "$TEMP_LOG"
fi

# Kill any existing server on port 3000
lsof -ti:3000 | xargs kill -9 2>/dev/null

# Start the server
node server.js > /dev/null 2>&1 &
SERVER_PID=$!

# Wait briefly for server to start
sleep 2

# Open browser
open "http://localhost:3000"

# Show notification
osascript -e 'display notification "ArXiv Viewer is now running in your browser." with title "ArXiv Viewer"'

# Register app termination handler
function cleanup {
  kill $SERVER_PID 2>/dev/null
  exit 0
}

# Trap signals
trap cleanup SIGINT SIGTERM

# Keep the script running until the server process is terminated
wait $SERVER_PID